<?php

require_once __DIR__ . '/vendor/autoload.php';

if (!defined('SSO_SERVICE')) define('SSO_SERVICE', 'http://127.0.0.1:20212');

function sse_login_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sse_login':
      return '<p>'.t('同济大学软件学院教师登录模块，使用前请先配置可登录账户');
      break;
  }
}

function sse_login_menu() {
  $items = [];
  //登录接口
  $items['sse_login/login'] = array(
    'title' => '登录',
    'page callback' => 'sse_login_login_callback',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  //设置菜单
  $items['admin/config/services/sse_login'] = array(
    'title' => '同济大学账户登录',
    'description' => '配置同济大学统一登录',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sse_login_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * 接受用户输入的教师名单，处理成可解析的数组
 */
function sse_login_teacher_process_to_array($user_input) {
  $valid_list = [];
  $arr = explode("\n", $user_input);
  foreach ($arr as $line) {
    $seg = explode('|', trim($line));
    if (count($seg) !== 2) {
      continue;
    }
    $valid_list[] = [
      'id' => trim($seg[0]),
      'name' => trim($seg[1])
    ];
  }
  return $valid_list;
}

/**
 * 接受可解析数组，转换成用户输入格式的教师名单
 */
function sse_login_teacher_process_to_text($list_array) {
  $ret = '';
  foreach ($list_array as $teacher) {
    $ret .= $teacher['id'].'|'.$teacher['name']."\n";
  }
  return trim($ret);
}

/**
 * 创建配置表单
 */
function sse_login_config_form($form, &$form_state) {
  $def_value = sse_login_teacher_process_to_text(variable_get('sse_login_teacher', []));
  $form['sse_login_teacher'] = array(
    '#type' => 'textarea',
    '#title' => t('可登录教师名单'),
    '#description' => t('一行一个，格式为：工号|姓名。只有符合工号和姓名的用户才允许登录到系统。'),
    '#default_value' => $def_value,
    '#required' => TRUE,
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'sse_login_config_form_submit';
  return $form;
}

/**
 * 处理配置表单
 */
function sse_login_config_form_submit($form, &$form_state) {
  variable_set('sse_login_teacher', sse_login_teacher_process_to_array($form_state['values']['sse_login_teacher']));
}

/**
 * 构建登录用户名
 */
function sse_login_build_username($faculty_id, $faculty_name) {
  return 'faculty_' . $faculty_id . '_' . $faculty_name;
}

/**
 * 构建 Email
 */
function sse_login_build_email($faculty_id) {
  return $faculty_id . '@tongji.edu.cn';
}

/**
 * implement hook_form_alter()
 * 
 * 修改登录界面
 */
function sse_login_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] === 'user-login') {
    if (isset($_GET['sse_sso_fail'])) {
      sse_login_error_and_redirect(t('统一验证用户名或密码错误。'));
      return;
    }
    $form['actions']['submit']['#value'] = '登录';
    $form['actions']['sse_submit'] = [
      '#type' => 'button',
      '#id' => 'sse_login_button',
      '#value' => t('同济账户登录'),
      '#attributes' => [
        'style' => 'margin-left: 10px'
      ]
    ];
    $form['#attached']['js'][] = drupal_get_path('module', 'sse_login') . '/js/login.js';
  }
}

/**
 * 输出错误信息并要求登录
 */
function sse_login_error_and_redirect($message) {
  drupal_set_message($message, 'error');
  drupal_goto('user/login');
}

/**
 * 清除 iPlanetDirectoryPro
 */
function sse_login_delete_sso_tokens() {
  if (!isset($_COOKIE['iPlanetDirectoryPro'])) {
    return;
  }
  setcookie('iPlanetDirectoryPro', null, -1, '/', '.tongji.edu.cn');
  unset($_COOKIE['iPlanetDirectoryPro']);
}

/**
 * 发起登录的处理函数
 */
function sse_login_login_callback() {
  if (!isset($_COOKIE['iPlanetDirectoryPro'])) {
    sse_login_error_and_redirect(t('无法获得会话参数，统一验证登录失败。'));
    return;
  }

  $sso_token = $_COOKIE['iPlanetDirectoryPro'];

  $faculty_id = null;
  $faculty_name = null;

  $valid_user_list = variable_get('sse_login_teacher', []);

  // 首先验证 Session 的合法性
  $res = Requests::get(constant('SSO_SERVICE').'/session/properties?sessionid=' . urlencode($sso_token));
  if (!$res->success) {
    sse_login_error_and_redirect(t('统一验证服务暂不可用，请联系管理员。'));
    return;
  }

  $obj = json_decode($res->body, true);
  if (!isset($obj['ok']) || $obj['ok'] !== true) {
    sse_login_error_and_redirect(t('统一验证会话已失效，请重新登录。'));
    sse_login_delete_sso_tokens();
    return;
  }

  // 验证通过，记录工号
  $faculty_id = $obj['properties']['UserId'];

  // 验证 UserId 是否在可登录白名单
  $user_id_found = false;
  foreach ($valid_user_list as $user_item) {
    if ($user_item['id'] === $faculty_id) {
      $user_id_found = $user_item;
      break;
    }
  }

  if ($user_id_found === false) {
    sse_login_error_and_redirect(t('该账户不可登录系统，请联系管理员进行配置。'));
    return;
  }
  
  // 检查用户是否已存在
  $drupal_user_name = sse_login_build_username($faculty_id, $user_id_found['name']);
  $drupal_user_email = sse_login_build_email($faculty_id);
  $drupal_user = user_load_by_name($drupal_user_name);
  
  // 用户不存在，先检查姓名是否匹配，再创建用户
  if (!$drupal_user) {
    $res = Requests::get(constant('SSO_SERVICE').'/info/student?sessionid='.urlencode($sso_token));
    if (!$res->success) {
      sse_login_error_and_redirect(t('统一验证服务暂不可用，请联系管理员。'));
      return;
    }

    $obj = json_decode($res->body, true);
    if (!isset($obj['ok']) || !isset($obj['info']['name']) || !$obj['info']['name']) {
      sse_login_error_and_redirect(t('统一验证服务无法获取用户姓名，请联系管理员。'));
      return;
    }

    if ($user_id_found['name'] !== $obj['info']['name']) {
      sse_login_error_and_redirect(t('您的姓名与系统中登记的姓名不符合，请联系管理员核查。'));
      return;
    }

    // 创建账户
    $new_user = [
      'name' => $drupal_user_name,
      'mail' => $drupal_user_email,
      'pass' => user_password(16),
      'status' => 1,
      'language' => 'zh-hans',
      'init' => $drupal_user_email,
      'roles' => [
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        6 => '可访问后台',
        9 => '教师信息管理'
      ]
    ];
    $drupal_user = user_save(null, $new_user);
  }

  // 用户已存在，则直接登录
  $form_state = [];
  $form_state['uid'] = $drupal_user->uid;
  user_login_submit([], $form_state);
  drupal_goto('<front>');
}
